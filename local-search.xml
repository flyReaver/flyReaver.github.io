<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/07/hello-world/"/>
    <url>/2025/04/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>My New Post</title>
    <link href="/2020/04/08/My-New-Post/"/>
    <url>/2020/04/08/My-New-Post/</url>
    
    <content type="html"><![CDATA[<h1 id="Winform数据绑定原理（一）——使用BIndingSource"><a href="#Winform数据绑定原理（一）——使用BIndingSource" class="headerlink" title="Winform数据绑定原理（一）——使用BIndingSource"></a>Winform数据绑定原理（一）——使用BIndingSource</h1><h1 id="一、控件的赋值"><a href="#一、控件的赋值" class="headerlink" title="一、控件的赋值"></a>一、控件的赋值</h1><p>我们的目标是实现这样的效果：<code>Label</code> 控件会随着 <code>TextBox</code> 控件内容的修改而更新显示</p><p><img src="/_Lw_3iCBhDNlY4GK4XXFS7uAzA2HMh0eUV6BqmdV9BM.gif" alt="image"></p><h2 id="1-传统方式实现"><a href="#1-传统方式实现" class="headerlink" title="1.传统方式实现"></a>1.传统方式实现</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 传统事件驱动代码</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">textBox1_TextChanged</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    person.Name = textBox1.Text;<br>    label1.Text = <span class="hljs-string">$&quot;Hello, <span class="hljs-subst">&#123;person.Name&#125;</span>&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在传统的WinForms开发中，开发者需要手动同步界面控件与后台数据源的状态，这里用户在<code>TextBox</code>中输入内容时，需要编写<code>TextChanged</code>事件处理代码，将新值手动更新到数据对象；反之，若数据对象的属性被代码修改，也需要手动更新对应的控件。这种方式存在以下问题：</p><ul><li><strong>代码冗余</strong>：每个控件都需要编写事件监听和数据同步逻辑，当界面变得复杂时，事件处理代码会大量增加，UI 与业务逻辑耦合严重</li><li><strong>维护困难</strong>：当界面或数据模型变动时，需修改多处代码。</li><li><strong>易出错</strong>：手动同步可能遗漏某些场景</li></ul><h2 id="2-绑定模式"><a href="#2-绑定模式" class="headerlink" title="2.绑定模式"></a>2.绑定模式</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Form1</span>()</span><br>&#123;<br>    InitializeComponent();<br>    <span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> Person();  <span class="hljs-comment">// 创建 ViewModel 实例</span><br>    <br>    <span class="hljs-comment">// 绑定 TextBox.Text 到 ViewModel.Name（双向绑定）</span><br>    textBox1.DataBindings.Add(<br>        <span class="hljs-string">&quot;Text&quot;</span>,                     <span class="hljs-comment">// 控件的属性</span><br>        person,                   <span class="hljs-comment">// 数据源（ViewModel）</span><br>        <span class="hljs-string">&quot;Name&quot;</span>,                     <span class="hljs-comment">// 数据源的属性</span><br>        <span class="hljs-literal">false</span>,                      <span class="hljs-comment">// 是否启用格式化</span><br>        DataSourceUpdateMode.OnPropertyChanged <span class="hljs-comment">// 更新模式</span><br>    );<br>    <br>    <span class="hljs-comment">// 绑定 Label.Text 到 ViewModel.Title（单向绑定）</span><br>    label1.DataBindings.Add(<br>        <span class="hljs-string">&quot;Text&quot;</span>, <br>        person, <br>        <span class="hljs-string">&quot;Title&quot;</span>, <br>        <span class="hljs-literal">false</span>, <br>        DataSourceUpdateMode.Never  <span class="hljs-comment">// 数据源更新时不回写</span><br>    );<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> : <span class="hljs-title">INotifyPropertyChanged</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> _name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name<br>    &#123;<br>        <span class="hljs-keyword">get</span> =&gt; _name;<br>        <span class="hljs-keyword">set</span><br>        &#123;<br>            _name = <span class="hljs-keyword">value</span>;<br>            PropertyChanged?.Invoke(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">new</span> PropertyChangedEventArgs(<span class="hljs-keyword">nameof</span>(Name)));<br>            PropertyChanged?.Invoke(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">new</span> PropertyChangedEventArgs(<span class="hljs-keyword">nameof</span>(Title)));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Title =&gt; <span class="hljs-string">$&quot;Hello <span class="hljs-subst">&#123;Name&#125;</span>&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">event</span> PropertyChangedEventHandler PropertyChanged;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>数据绑定</strong>的核心思想是通过<strong>数据绑定</strong>将视图与逻辑解耦，实现双向自动同步：</p><ul><li>数据源变更时，自动更新界面</li><li>界面操作（如用户输入）自动更新数据源。</li></ul><h2 id="3-绑定说明"><a href="#3-绑定说明" class="headerlink" title="3.绑定说明"></a>3.绑定说明</h2><p>我们来看这行代码：<code>textBox1.DataBindings.Add(&quot;Text&quot;, person, &quot;Name&quot;, false, DataSourceUpdateMode.OnPropertyChanged);</code> 前三个参数表示将 <code>textBox1</code> 控件的 <code>Text</code> 属性绑定到 <code>personVM</code> 对象的 <code>Name</code> 属性。这样，当两边对象的属性发生更改时，都会通知另一方。当我们通过控件（UI 界面）修改 <code>textBox1</code> 的值时，就会触发 <code>person.Name</code> 属性的 <code>set</code> 方法，而 <code>set</code> 方法中又调用了 <code>Title</code> 的 <code>PropertyChanged</code> 事件。由于 <code>label1</code> 绑定了 <code>Title</code>，所以 <code>Label</code> 也会随之更新。</p><p>代码解释：Control属性<a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.control.databindings">DataBindings</a>是 从Control父类继承的属性  是一个 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.controlbindingscollection?view=netframework-4.8">ControlBindingsCollection</a>，其中包含该控件的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.forms.binding?view=netframework-4.8">Binding</a> 对象。Add方法内部则是new了一个<a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.forms.binding">Binding</a> 。</p><h1 id="二、BindingSource-数据源"><a href="#二、BindingSource-数据源" class="headerlink" title="二、BindingSource 数据源"></a>二、<strong>BindingSource</strong> 数据源</h1><h2 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1.简单使用"></a>1.简单使用</h2><p>在上述例子中，保持其他代码不变，将 <code>Form</code> 构造函数中的代码修改如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">InitializeComponent();<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> PersonViewModel();<br>BindingSource source = <span class="hljs-keyword">new</span> BindingSource();<br>source.DataSource = person;<br>textBox1.DataBindings.Add(<span class="hljs-string">&quot;Text&quot;</span>, source, <span class="hljs-string">&quot;Name&quot;</span>, <span class="hljs-literal">false</span>, DataSourceUpdateMode.OnPropertyChanged);<br>label1.DataBindings.Add(<span class="hljs-string">&quot;Text&quot;</span>, source, <span class="hljs-string">&quot;Title&quot;</span>, <span class="hljs-literal">false</span>, DataSourceUpdateMode.Never);<br>person.Name = <span class="hljs-string">&quot;test&quot;</span>;<br></code></pre></td></tr></table></figure><p>再操作UI界面，会得到相同的效果。那么，BindingSource作用是什么呢？ 为什么要用它呢？</p><h2 id="2-复杂例子"><a href="#2-复杂例子" class="headerlink" title="2.复杂例子"></a>2.复杂例子</h2><p>我们先来看一个稍微复杂的例子</p><p><img src="/iGWvV6TEp8zPe_JXd_c0M_9MMMdcYYSncSguWILv_mU.gif" alt="image"></p><p>在这个例子中，我们可能会觉得不知道如何使用<code>Binding</code>了，因为这里不再是一个属性对应一个值，而是一个集合。不信的话，你可以尝试使用以下代码：<code>dataGridView1.DataBindings.Add(&quot;DataSource&quot;, listPerson, &quot;Name&quot;, false, DataSourceUpdateMode.OnPropertyChanged)</code> 你会发现没有任何响应，甚至会报错。</p><p>下面是正确的简单实现：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp">List&lt;Person&gt; listPerson;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BindingSourceComp01</span>()</span><br>&#123;<br>    InitializeComponent();<br>    listPerson = <span class="hljs-keyword">new</span> List&lt;Person&gt;()<br>    &#123;<br>        <span class="hljs-keyword">new</span> Person() &#123; ID=<span class="hljs-number">1</span>,Name=<span class="hljs-string">&quot;关羽&quot;</span>&#125;,<br>        <span class="hljs-keyword">new</span> Person() &#123; ID=<span class="hljs-number">2</span>,Name=<span class="hljs-string">&quot;张飞&quot;</span>&#125;,<br>        <span class="hljs-keyword">new</span> Person() &#123; ID=<span class="hljs-number">3</span>,Name=<span class="hljs-string">&quot;马超&quot;</span>&#125;<br>    &#125;;<br>    dataGridView1.DataSource = listPerson;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    <span class="hljs-keyword">var</span> name = textBox1.Text;<br>    listPerson.Add(<span class="hljs-keyword">new</span> Person() &#123; ID = listPerson.Count + <span class="hljs-number">1</span>, Name = name &#125;);<br>    <span class="hljs-comment">// 没有绑定，需要手动刷新</span><br>    dataGridView1.DataSource = <span class="hljs-literal">null</span>;<br>    dataGridView1.DataSource = listPerson;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候，<code>BindingSource</code> 就可以发挥作用了，只需要维护创建的数据源对象即可，代码会变得简洁：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp">BindingSource bindingSource;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BindingSourceComp01</span>()</span><br>&#123;<br>    InitializeComponent();<br>    List&lt;Person&gt; listPerson = <span class="hljs-keyword">new</span> List&lt;Person&gt;()<br>    &#123;<br>        <span class="hljs-keyword">new</span> Person() &#123; ID=<span class="hljs-number">1</span>,Name=<span class="hljs-string">&quot;关羽&quot;</span>&#125;,<br>        <span class="hljs-keyword">new</span> Person() &#123; ID=<span class="hljs-number">2</span>,Name=<span class="hljs-string">&quot;张飞&quot;</span>&#125;,<br>        <span class="hljs-keyword">new</span> Person() &#123; ID=<span class="hljs-number">3</span>,Name=<span class="hljs-string">&quot;马超&quot;</span>&#125;<br>    &#125;;<br>       <span class="hljs-comment">// 将数据集合设置到 BindingSource</span><br>       bindingSource = <span class="hljs-keyword">new</span> BindingSource() &#123; DataSource = listPerson &#125;;<br>       <span class="hljs-comment">// 将 BindingSource 作为 DataGridView 的数据源</span><br>       dataGridView1.DataSource = bindingSource;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">button1_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>    <span class="hljs-keyword">var</span> name = textBox1.Text;<br>    <span class="hljs-comment">// 注意这里要用BindingSource 不能再用普通集合操作了</span><br>    bindingSource.Add(<span class="hljs-keyword">new</span> Person()<br>    &#123;<br>        ID = bindingSource.Count + <span class="hljs-number">1</span>, <span class="hljs-comment">// 这里id不是很严谨，因为可能有删除操作，所以这里只是简单的加1</span><br>        Name = name<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-解释-BindingSource"><a href="#3-解释-BindingSource" class="headerlink" title="3.解释 BindingSource"></a>3.解释 <a href="https://learn.microsoft.com/zh-cn/dotnet/desktop/winforms/controls/bindingsource-component-architecture?view=netframeworkdesktop-4.8">BindingSource</a></h2><p>BindingSource组件在Windows Forms中主要用于简化数据绑定并增强控件与数据源之间的交互，其核心功能及特点如下：</p><ol><li><strong>核心作用</strong><ul><li>提供<strong>间接绑定层</strong> ，将控件与数据源解耦。通过将控件绑定到BindingSource，再由BindingSource连接实际数据源（如数据库、对象集合等），实现数据变更的自动同步</li></ul></li><li><strong>同步与导航</strong><ul><li>多个控件绑定同一BindingSource时，自动同步当前项及数据变更，避免手动更新</li><li>内置<code>CurrencyManager</code>管理数据导航（如记录切换），简化分页或数据遍历操作</li></ul></li></ol><h1 id="三、综合例子"><a href="#三、综合例子" class="headerlink" title="三、综合例子"></a>三、综合例子</h1><p>带一个新增和删除的效果（暂时不考虑额外窗体编辑）</p><p><img src="/tvSYCQfXls4k1FFPs-i42gIHVV4uSF4U9j8aWfk8a9Q.gif" alt="image"></p><p>代码如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitDataGridView</span>()</span><br>&#123;<br>bindingSource = <span class="hljs-keyword">new</span> BindingSource() &#123; DataSource = Student.GetList() &#125;;<br>dgvStudent.DataSource = bindingSource;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">btnAdd_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>&#123;<br>bindingSource.Add(<span class="hljs-keyword">new</span> Student<br>&#123;<br>Id = <span class="hljs-number">10</span>,<br>Name = <span class="hljs-string">&quot;New Student&quot;</span>,<br>Age = <span class="hljs-number">20</span>,<br>Classes = <span class="hljs-number">4</span>,<br>Address = <span class="hljs-string">&quot;New Address&quot;</span><br>&#125;);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">btnDel_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, EventArgs e</span>)</span><br>&#123;<br><span class="hljs-comment">// 通过bindingSource.Current获取当前选中的对象</span><br><span class="hljs-keyword">if</span> (bindingSource.Current <span class="hljs-keyword">is</span> Student item)<br>&#123;<br><span class="hljs-keyword">var</span> result = MessageBox.Show(<span class="hljs-string">&quot;是否删除?&quot;</span>, <span class="hljs-string">&quot;删除&quot;</span>, MessageBoxButtons.OKCancel, MessageBoxIcon.Question);<br><span class="hljs-keyword">if</span> (result.Equals(DialogResult.OK))<br>bindingSource.Remove(item);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
